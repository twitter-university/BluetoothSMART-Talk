= Bluetooth SMART at Mobile + Web Conference

== About Marko Gargenta

image::images/learning-android.jpg[float="right"]

Building Twitter https://twitter.com/university[@University]

Co-founded Marakana (acquired by Twitter)

Author of Learning Android and Android Bootcamp

San Francisco, CA

[big]#https://twitter.com/markog[@markog]#


== [large-black-slide]#Bluetooth SMART#


== Bluetooth Basics

image::images/bluetooth-overview.jpg[]

<<<

Bluetooth Classic:

* High bandwidth communication
* Complex pairing

Bluetooth LE:

* Low power
* Low bursts of energy

<<<

Device types:

* Broadcaster
* Observer
* Peripheral
* Central


== GATT Profile

General Attribute Profile

image::images/GATT-profile.png[]


== Service

Service is a feature

Service has a UUID

Service has _characteristics_

<<<

Heart Rate Service can have _characteristics_ such as:

* Heart rate measurement
* Sensor location
* Etc.

== [black-slide]#Android GATT Central Application#


== Android Manifest

Manifest file defines new feature

[source,xml]
----
<uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>
----

== UUIDs

Get them from the device manuals

[source,java]
----
/* Humidity Service */
private static final UUID HUMIDITY_SERVICE 
  = UUID.fromString(
    "f000aa20-0451-4000-b000-000000000000");  
...
----

== BluetoothManager and BluetoothAdapter

[source,java]
----
BluetoothManager manager = (BluetoothManager) getSystemService(BLUETOOTH_SERVICE);
mBluetoothAdapter = manager.getAdapter();
----


== Is Bluetooth Enabled?

[source,java]
----
if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
  //Bluetooth is disabled
  Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
  startActivity(enableBtIntent);
  finish();
  return;
}
----


== Is Bluetooth LE Supported?

[source,java]
----
if (!getPackageManager().hasSystemFeature(
    PackageManager.FEATURE_BLUETOOTH_LE)) {
  Toast.makeText(this, "No LE Support.", 
  		Toast.LENGTH_SHORT).show();
  finish();
  return;
}
----

== Start LE Scan

[source,java]
----
mBluetoothAdapter.startLeScan(this);
----

== onLeScan() Callback

[source,java]
----
/* BluetoothAdapter.LeScanCallback */

@Override
public void onLeScan(BluetoothDevice device, 
        	  int rssi, byte[] scanRecord) {
  if (DEVICE_NAME.equals(device.getName())) {
    mDevices.put(device.hashCode(), device);
    //Update the overflow menu
    invalidateOptionsMenu();
  }
}
----

== BluetoothGattCallback

+onConnectionStateChange()+::
Once successfully connected we must next discover all the services on the
device before we can read and write their characteristics

<<<

+onServicesDiscovered()+::
With services discovered, we are going to reset our state machine and start
working through the sensors we need to enable

<<<

+onCharacteristicRead()+::
For each read, pass the data up to the UI thread to update the display

<<<

+onCharacteristicWrite()+::
After writing the enable flag, next we read the initial value

<<<

+onCharacteristicChanged()+::
After notifications are enabled, all updates from the device on characteristic
value changes will be posted here.  Similar to read, we hand these up to the
UI thread to update the display.

<<<

+onDescriptorWrite()+::
Once notifications are enabled, we move to the next sensor and start over with enable.


<<<

+onReadRemoteRssi()+::
Print out the RSSI.


== [black-slide]#Android LE Observer Application#

== Device as a Broadcaster

It doesn't accept any incoming connections.

Pushes out the data is has inside its device discovery.

Data is packaged inside _advertisment_ packages.

== Ad Structure

image::images/ADStructure.png[]

Defined by https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile[Bluetooth SIG].

Include elements such as:

* Control flags
* Device name
* Service UUIDs
* Service data
* Transmit power level


== Special thanks to Dave Smith

Code samples by Dave Smith:

[big]#@devunwired#

http://www.doubleencore.com[DoubleEncore.com]

https://github.com/devunwired/accessory-samples/tree/master/BluetoothGatt[https://github.com/devunwired/accessory-samples]

== [large-black-slide]#Thank you#

[big]#Marko Gargenta#

[big]#@markog#

